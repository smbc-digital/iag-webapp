        [HttpPost]
        [Route("api/{businessId}/groups/add")]
        public async Task<IActionResult> AddGroup(string businessId, [FromBody] Group group)
        {
            var contentfulGroup = _mapper.Map<ContentfulGroup>(group);

            return await _handler.Get(() =>
            {
                var managementRepository = _managementRepository(_createConfig(businessId));
                return managementRepository.CreateOrUpdate(contentfulGroup);
            });
        }

        [HttpPut]
        [Route("api/{businessId}/groups/update")]
        public async Task<IActionResult> UpdateGroup([FromBody] Group group, string businessId)
        {
            var repository = _groupRepository(_createConfig(businessId));
            var existingGroup = await repository.GetContentfulGroup(group.Slug);

            var existingCategories = await repository.GetContentfulGroupCategories();
            var referencedCategories = existingCategories.Where(c => group.CategoriesReference.Select(cr => cr.Slug).Contains(c.Slug)).ToList();

            var contentfulGroup = _mapper.Map<ContentfulGroup>(group);
            contentfulGroup.CategoriesReference = referencedCategories;
            contentfulGroup.Image = existingGroup.Image;
            ManagementGroup managementGroup = new ManagementGroup();
            _mapper.Map(contentfulGroup, managementGroup);

            return await _handler.Get(async () =>
            {
                var managementRepository = _managementRepository(_createConfig(businessId));
                var version = await managementRepository.GetVersion(existingGroup.Sys.Id);
                existingGroup.Sys.Version = version;
                return await managementRepository.CreateOrUpdate(managementGroup, existingGroup.Sys);
            });
        }

        [HttpDelete]
        [Route("api/{businessId}/groups/{slug}/administrators/delete/{emailAddress}")]
        public async Task<IActionResult> RemoveAdministrator(string slug, string emailAddress, string businessId)
        {
            var repository = _groupRepository(_createConfig(businessId));

            var existingGroup = await repository.GetContentfulGroup(slug);

            existingGroup.GroupAdministrators.Items = existingGroup.GroupAdministrators.Items.Where(a => a.Email != emailAddress).ToList();

            ManagementGroup managementGroup = new ManagementGroup();
            _mapper.Map(existingGroup, managementGroup);

            return await _handler.Get(async () =>
            {
                var managementRepository = _managementRepository(_createConfig(businessId));
                var version = await managementRepository.GetVersion(existingGroup.Sys.Id);
                existingGroup.Sys.Version = version;
                return await managementRepository.CreateOrUpdate(managementGroup, existingGroup.Sys);
            });
        }
        
        [HttpPut]
        [Route("api/{businessId}/groups/{slug}/administrators/update/{emailAddress}")]
        public async Task<IActionResult> AddAdministrator([FromBody] string permission, string slug, string emailAddress, string businessId)
        {
            var repository = _groupRepository(_createConfig(businessId));

            var existingGroup = await repository.GetContentfulGroup(slug);

            existingGroup.GroupAdministrators.Items = existingGroup.GroupAdministrators.Items.Where(a => a.Email != emailAddress).ToList();
            existingGroup.GroupAdministrators.Items.Add(new GroupAdministratorItems {Email = emailAddress, Permission = permission});

            ManagementGroup managementGroup = new ManagementGroup();
            _mapper.Map(existingGroup, managementGroup);

            return await _handler.Get(async () =>
            {
                var managementRepository = _managementRepository(_createConfig(businessId));
                var version = await managementRepository.GetVersion(existingGroup.Sys.Id);
                existingGroup.Sys.Version = version;
                return await managementRepository.CreateOrUpdate(managementGroup, existingGroup.Sys);
            });
        }
