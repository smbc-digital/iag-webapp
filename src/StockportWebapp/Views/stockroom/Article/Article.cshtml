@model ArticleViewModel
@{
    ViewData["Title"] = Model.Article.Title;
    ViewData["Description"] = Model.MetaDescription;
    ViewData["og:title"] = Model.OgTitleMetaData;
    Layout = "../shared/_Layout.cshtml";
}

<div class="grid-container-full-width" style="background-color:white;" data-cy="article">
    <div class="hero">
        @if (Model.ArticleHasImage)
        {
            <div class="hero__background" style="background-image: url(@Model.Article.Image?fm=webp)"></div>
        }
        
        <div class="grid-container hero__wrapper">
            <div class="grid-100">
                <div class="hero__image"></div>

                <div class="hero__content">
                    <h1 class="hero__title">@Model.Article.Title</h1>

                    <div class="hero__about">
                        <p>@Model.Article.Teaser</p>
                        
                        <p class="hero__about-attribution">
                            @if (!string.IsNullOrEmpty(Model.Article.Author))
                            {
                                <span>Author: <strong>@Model.Article.Author</strong></span>
                            }
                            
                            @if (!string.IsNullOrEmpty(Model.Article.Author) && !string.IsNullOrEmpty(Model.Article.Photographer))
                            {
                                <span class="article-hero__about-break">|</span>
                            }

                            @if (!string.IsNullOrEmpty(Model.Article.Photographer))
                            {
                                <span>Photographer: <strong>@Model.Article.Photographer</strong></span>
                            }
                        </p>

                        @if (Model.Article.HideLastUpdated is false)
                        {
                            <p>Published: <strong><partial name="FormattedDate" model="@Model.Article.PublishedOn" /></strong></p>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="grid-container">
        <div class="grid-100">
            <section class="article article--margin-bottom">
                @if (!string.IsNullOrEmpty(Model.Article.Body))
                {
                    <article>
                        @Html.Raw(StockportWebapp.Utils.HtmlHelper.AddImageAttributes(Model.Article.Body, "691", "389", "691", "919", "1192"))
                    </article>
                }
            </section>
        </div>
    </div>
</div>

@if (Model.Article.RelatedContent.Any())
{
    List<SubItem> itemsToDisplay = Model.GetItemsToDisplay(Model.Article.RelatedContent.ToList());
    <partial name="RelatedContent" model="@Model.Article.RelatedContent" view-data='@(new ViewDataDictionary(ViewData) { { "itemsToDisplay", @itemsToDisplay } })' />
}

@if (Model.Article.Events is not null && Model.Article.Events.Any() && Model.Article.Events.Count.Equals(3))
{
    <div class="grid-container-full-width" style="background-color: #f2f2f2;">
        <div class="grid-container">
            <div class="grid-100">
                <div class="hero__about hero__about--no-padding-top">
                    <h2 class="card-title @(Model.Article.RelatedContent.Any() ? "card-title--no-margin-top" : string.Empty) h-xl">Related events</h2>

                    <partial name="NavCards" model="Model.PrimaryItems" view-data='@(new ViewDataDictionary(ViewData) { { "itemsType", "events" } })' />
                </div>
            </div>
        </div>
    </div>
}

<script>
    window.addEventListener("message", function(event) {
        alert(event.data.iframeHeight);

        console.log("listening form message ", event)
        const allowedOrigins = [
            "https://int-formbuilder-origin.smbcdigital.net",
            "https://qa-formbuilder-origin.smbcdigital.net",
            "https://stage-formbuilder-origin.smbcdigital.net",
            "http://forms.stockport.gov.uk"
        ];

        if (!allowedOrigins.includes(event.origin)) {
            console.warn("Message origin not allowed:", event.origin);
            return;
        }

        if (event.data && event.data.iframeHeight) {
            console.log("Received iframe height:", event.data.iframeHeight);

            const iframe = document.getElementsByTagName("iframe")[0]
            if (iframe) {
                console.log("Updating iframe height to:", event.data.iframeHeight);
                iframe.style.height = event.data.iframeHeight + "px";
            } else {
                console.warn("No iframe found on the page.");
            }
        } else {
            console.warn("No iframeHeight data received.");
        }
    }, false);
</script>
