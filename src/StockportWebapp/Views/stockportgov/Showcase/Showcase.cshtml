@using System.Linq
@using Microsoft.AspNetCore.Mvc.Rendering
@using StockportWebapp.ProcessedModels
@using StockportWebapp.FeatureToggling
@inject FeatureToggles FeatureToggles

@model ProcessedShowcase
@{
    ViewData["Title"] = Model.Title;
    ViewData["og:title"] = Model.Title;
    ViewData["Description"] = Model.Teaser;
    ViewData["Slug"] = Model.Slug;
    Layout = "../Shared/_Layout.cshtml";
    var titleHack = string.Empty;
    ViewData["EventsH2"] = true;
    ViewData["EventCategory"] = Model.EventCategory;
    ViewData["EventSubheading"] = Model.EventSubheading;
}
@section Breadcrumbs {
    @Html.Partial("Breadcrumb", Model.Breadcrumbs)
}

@if (Model.Alerts != null)
{
    foreach (var alert in Model.Alerts)
    {
        @Html.Partial("GlobalAlert", alert)
    }
}

@if (FeatureToggles.ShowcaseRedesign && Model.PrimaryItems != null && Model.PrimaryItems.Count() == 3)
{
    <div class="showcase-hero-image" style="background-image: url(@Model.HeroImageUrl)">
        <div class="title-card showcase-redesign-title-card">
            <div class="grid-container tablet-grid-100 grid-100 matchbox-parent-3-3-3 showcase-title">
                <div class="showcase-title-container mobile-grid-100 tablet-grid-100">
                    <h1>
                        <span>@Model.Title</span>
                    </h1>
                </div>

                <div class="clearfix"></div>

                @foreach (var item in Model.PrimaryItems)
                {
                    <div class="showcase-primary-item-container grid-33 tablet-grid-100 mobile-grid-100 matchbox-child">
                        <a href="@item.NavigationLink">
                            <div class="showcase-primary-item">
                                <div class="primary-item-icon colour-icon tablet-grid-15 mobile-grid-25">
                                    <i class="@item.Icon si-default"></i>
                                </div>
                                <h3 class="primary-item-title tablet-grid-75 mobile-grid-65">@item.Title</h3>
                                <div class="primary-item-teaser hide-on-tablet hide-on-mobile">@item.Teaser</div>
                            </div>
                        </a>
                    </div>
                }
            </div>
        </div>
    </div>
}
else
{

    if (!string.IsNullOrWhiteSpace(Model.HeroImageUrl))
    {
        <div class="showcase-hero-image" style="background-image: url(@Model.HeroImageUrl)">
            <div class="title-card">
                <h1>
                    <span>@Model.Title</span>
                </h1>
                <div class="clearfix"><hr class="hero-image-divider" /> </div>
                <h2>
                    <span>@Model.Teaser</span>
                </h2>
            </div>
        </div> 
    }
    else
    {
        <div class="full-width-title">
            <div class="grid-container grid-parent grid-100">
                <div class="grid-100 tablet-grid-100 mobile-grid-100">
                    <h1 class="full-width-title-with-button">@Model.Title</h1>
                </div>
            </div>
        </div>
        titleHack = "full-width-title-margin-fix";
    }
    
}

@if (Model.Consultations.Any())
{
    <div class="@titleHack alt-container-row">
        @Html.Partial("Consultations", Model.Consultations)
    </div>
    titleHack = string.Empty;
}
@if (Model.FeaturedItems.Any())
{
    <div class="alt-container-row featured-items-wrapper matchbox-parent-4-4-5">
        <h2>@Model.Subheading</h2>
        <div class="featured-topic-list">
            @{
                foreach (var item in Model.FeaturedItems)
                {
            <div class="grid-20 tablet-grid-25 mobile-grid-33 featured-topic matchbox-child">
                <div class="featured-topic-content">
                    <a href="@item.NavigationLink">
                        <div class="featured-topic-icon">
                            <i class="@item.Icon si-default"></i>
                        </div>
                        <div class="featured-topic-name">@item.Title</div>
                    </a>
                    <p class="hide-on-mobile hide-on-tablet featured-topic-description">
                        @if (item.SubItems.Any())
                                {
                                <span>Including</span>
                                }
                        @foreach (var subItem in item.SubItems.Take(2))
                                {
                                <br />
                                <a href="@subItem.NavigationLink">@subItem.Title</a>
                                }
                    </p>
                </div>
            </div>
                }
            }
        </div>
    </div>
                }

@if (Model.NewsArticle != null)
{
    <div class="@titleHack showcase-news alt-container-row">
        @Html.Partial("ShowcaseNewsArticle", Model)
    </div>
    titleHack = string.Empty;
}

@if (!string.IsNullOrEmpty(Model.EventCategory) && Model.Events != null && Model.Events.Any() && Model.NewsArticle == null)
{
    <div class="@titleHack showcase-events alt-container-row">
        @Html.Partial("ShowcaseEventCards", Model)
    </div>
    titleHack = string.Empty;
}

@if (Model.SocialMediaLinks != null && Model.SocialMediaLinks.Any())
{
    <div class="@titleHack alt-container-row">
        @Html.Partial("ShowcaseSocialMediaLinks", Model.SocialMediaLinks)
    </div>
    titleHack = string.Empty;
}

@if (!string.IsNullOrEmpty(Model.EventCategory) && Model.Events != null && Model.Events.Any() && Model.NewsArticle != null)
{
    <div class="@titleHack showcase-events alt-container-row">
        @Html.Partial("ShowcaseEventCards", Model)
    </div>
    titleHack = string.Empty;
}
@if (!string.IsNullOrWhiteSpace(Model.Body) && !string.Equals("<p></p>\n", Model.Body))
{
    <div class="@titleHack alt-container-row">
        <div class="grid-container showcase-body">
            <div class="l-body-section-filled l-article-content grid-100 tablet-grid-100 mobile-grid-100 grid-parent">
                @if (!string.IsNullOrWhiteSpace(Model.BodySubheading))
                {
                    <div class="grid-100">
                        <h2 class="text-centre">@Model.BodySubheading</h2>
                    </div>
                }
                <div class="grid-100 grid-parent">
                    <article>
                        @Html.Raw(Model.Body)
                    </article>
                </div>

            </div>
        </div>
    </div>
    titleHack = string.Empty;
}

@if (!string.IsNullOrEmpty(Model.EmailAlertsText) && !(string.IsNullOrEmpty(Model.EmailAlertsTopicId)))
{
    <div class="@titleHack alt-container-row showcase-email-banner">
        <div class="email-banner grid-container">
            <div class="email-banner-container mobile-grid-100 grid-parent">
                <div class="email-banner-icon-container hide-on-mobile hide-on-tablet">
                    <i class="si-envelope-open email-banner-icon"></i>
                </div>
                <div class="email-banner-inner grid-parent grid-95 tablet-grid-95 mobile-grid-100">
                    <div class="grid-100 tablet-grid-100 mobile-grid-100 email-banner-text-container">
                        <div class="grid-100 grid-parent">
                            <h3> @Model.EmailAlertsText</h3>
                        </div>
                    </div>
                    <div class="grid-100 input-container">
                        <form method="get" role="form" action="/subscribe">
                            
                            <div class="grid-50 tablet-grid-50 grid-parent">
                                <input type="email" name="emailAddress" placeholder="Enter your email address">
                            </div>
                            <div class="grid-30 tablet-grid-50 grid-parent">
                                <button type="submit" id="test-subscribe" class="button-default">Subscribe</button>
                            </div>
                            <div class="suffix-10"></div>
                            @Html.HiddenFor(o => o.EmailAlertsTopicId)
                        </form>
                    </div>
                </div>

            </div>
        </div>
    </div>

}

