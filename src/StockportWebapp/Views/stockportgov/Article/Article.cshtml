@using StockportWebapp.Utils;
@inject IApplicationConfiguration ApplicationConfiguration

@model ArticleViewModel
@{
    ViewData["Title"] = Model.Article.Title;
    ViewData["Description"] = Model.MetaDescription;
    ViewData["og:title"] = Model.OgTitleMetaData;
    Layout = "../Shared/_Layout2023.cshtml";
    string dataCy = Model.DisplayedSection is null ? "flat-article" : "article-with-sections";
    string articleMarginBottom = !Model.Article.TrustedLogos.Any() || Model.Article.TrustedLogos is null
        ? " section"
        : string.Empty;
    
    bool usePreview = bool.TryParse(ApplicationConfiguration.GetContentfulUsePreview(), out var preview) && preview;

    JObject rawContentful = Model.Article.RawContentful ?? new JObject();
    var rawContentfulJson = JsonConvert.SerializeObject(rawContentful);
}

<div class="grid-container-full-width" style="background-color:white;" data-cy="@dataCy" data-contentful-entry-id="@Model.Article.ContentfulId" data-content-type-id="article">
    <partial name="GlobalAlerts" model='Model.Article.Alerts' />
    <partial name="Breadcrumb2023" model="Model.Article.Breadcrumbs" />

    <div class="grid-container">
        <div class="grid-100">
            <div class="article--70">
                <h1 class="article__title" data-contentful-entry-id="@Model.Article.ContentfulId" data-contentful-field-id="title">@Model.Article.Title</h1>

                @if (Model.ArticleWithSection && !Model.ArticleHasImage)
                {
                    <partial name="ArticleSections" />
                }
            </div>

            <section class="article">
                <div class="article--70 @articleMarginBottom">
                    @if (Model.ArticleHasImage)
                    {
                        <div class="article-hero">
                            <img src="@Model.Article.Image?q=89&fm=webp"
                                 srcset="@Model.Article.Image?w=967&q=89&fm=webp 967w,
                                        @Model.Article.Image?w=853&q=89&fm=webp 853w,
                                        @Model.Article.Image?w=712&q=89&fm=webp 712w"
                                 sizes="(max-width: 767px) 712px,
                                        ((min-width: 768px) and (max-width: 1023px)) 967px,
                                        (min-width: 1024px) 853px"
                                 class="article-hero__image"
                                 width="712"
                                 height="350"
                                 alt="@Model.Article.AltText"
                                 data-contentful-field="image" />
                        </div>
                    }

                    @if (Model.ArticleWithSection && Model.ArticleHasImage)
                    {
                        <partial name="ArticleSections" />
                    }

                    @if (Model.ArticleWithSection)
                    {
                        <article class="article-body">
                            <h2 id="@Model.DisplayedSection.Slug">@Model.DisplayedSection.Title</h2>
                            @Html.Raw(Model.DisplayedSection.Body)
                        </article>
                    }

                    @if (!string.IsNullOrEmpty(Model.Article.Body))
                    {
                        <article data-contentful-field-id="body">
                            @Html.Raw(StockportWebapp.Utils.HtmlHelper.AddImageAttributes(Model.Article.Body, "720", "511", "720", "937", "852"))
                        </article>
                    }

                    @if (!Model.HideLastUpdated && Model.ArticleWithSection)
                    {
                        <p class="article-date">
                            Last updated <partial name="FormattedDate" model='Model.DisplayedSection.UpdatedAt' />
                        </p>
                    }
                    else if (!Model.HideLastUpdated)
                    {
                        <p class="article-date">
                            Last updated <partial name="FormattedDate" model='Model.Article.UpdatedAt' />
                        </p>
                    }

                    @if (Model.ShouldShowPreviousSectionButton() || Model.ShouldShowNextSectionButton())
                    {
                        <partial name="ArticleSectionPagination" />
                    }

                    @if (Model.ArticleWithSection && Model.DisplayedSection.TrustedLogos.Any())
                    {
                        <partial name="LogoArea" model='@Model.DisplayedSection.TrustedLogos' view-data='@(new ViewDataDictionary(ViewData) {{"logoAreaTitle", @Model.DisplayedSection.LogoAreaTitle}, {"articleWithSection", Model.ArticleWithSection}, {"logoAreaArticle", true}})' />
                    }
                    else
                    {
                        <partial name="LogoArea" model='@Model.Article.TrustedLogos' view-data='@(new ViewDataDictionary(ViewData) {{"logoAreaTitle", @Model.Article.LogoAreaTitle}, {"articleWithSection", Model.ArticleWithSection}, {"logoAreaArticle", true}})' />
                    }
                </div>

                <div class="article--30 section">
                    @if (Model.HasParentTopicWithSubItems())
                    {
                        <partial name="SidebarNavCardList" model="@Model.Sidebar" />
                    }

                    @if (Model.HasRelatedContentWithSubItems())
                    {
                        <partial name="ArticleRelatedContent" model='new ExternalLinksViewModel() { RelatedContent=Model.Article.RelatedContent }' />
                    }
                </div>
            </section>
        </div>
    </div>
</div>

@if (usePreview)
{
    @Html.Raw($@"
        <script type='module'>
            import {{ ContentfulLivePreview }} from 'https://cdn.jsdelivr.net/npm/@contentful/live-preview@4.6.39/dist/index.js';

            document.addEventListener('DOMContentLoaded', () => {{
                const entryId = '{Model.Article.ContentfulId}';
                const locale = 'en-GB';
                const rawData = {rawContentfulJson};

                console.log('raw data == ', rawData);

                function waitForTaggedElements() {{
                    return new Promise((resolve) => {{
                        const check = () => {{
                            const tagged = document.querySelectorAll('[data-contentful-entry-id][data-contentful-field-id]');
                            if (tagged.length > 0) {{
                                resolve(tagged);
                            }} else {{
                                requestAnimationFrame(check);
                            }}
                        }};
                        check();
                    }});
                }}

                function addLocaleAttributes(tagged) {{
                    tagged.forEach(el => {{
                        if (!el.hasAttribute('data-contentful-locale')) {{
                            el.setAttribute('data-contentful-locale', locale);
                        }}
                    }});
                }}

                function renderInitialContent() {{
                    Object.entries(rawData.fields ?? {{}}).forEach(([fieldName, fieldValue]) => {{
                        const container = document.querySelector(`[data-contentful-field-id='${{fieldName}}']`);
                        if (!container) return;

                        if (container.tagName === 'IMG') {{
                            const imageUrl = fieldValue?.fields?.file?.url;
                            if (imageUrl) container.src = imageUrl;
                        }} else {{
                            container.textContent = fieldValue;
                        }}
                    }});
                }}

                function initLivePreview() {{
                    ContentfulLivePreview.init({{
                        locale,
                        debugMode: true,
                        enableInspectorMode: true,
                        enableLiveUpdates: true,
                        targetOrigin: 'https://app.contentful.com'
                    }});

                    ContentfulLivePreview.subscribe({{
                        locale,
                        callback: (updatedEntry) => {{
                            console.log('Live update received:', updatedEntry);
                            updateDomFromEntry(updatedEntry, locale);
                        }}
                    }});
                }}

                function updateDomFromEntry(entry, locale) {{
                    const entryId = entry?.sys?.id;
                    const container = document.querySelector(`[data-contentful-entry-id='${{entryId}}']`);
                    if (!container || !entry.fields) return;

                    Object.entries(entry.fields).forEach(([fieldName, fieldValueByLocale]) => {{
                        const fieldValue = fieldValueByLocale?.[locale] ?? fieldValueByLocale?.['en-GB'] ?? null;
                        if (fieldValue === null) return;

                        const target = container.querySelector(`[data-contentful-field-id='${{fieldName}}']`);
                        if (!target) return;

                        if (target.tagName === 'IMG') {{
                            const imageUrl = fieldValue?.fields?.file?.url;
                            if (imageUrl) target.src = imageUrl;
                        }} else {{
                            target.textContent = fieldValue;
                        }}
                    }});
                }}

                waitForTaggedElements()
                    .then(tagged => {{
                        console.log('Found tagged elements:', tagged.length);
                        addLocaleAttributes(tagged);
                        renderInitialContent();
                        initLivePreview();
                    }});
            }});
        </script>
    ")
}
