@model StockportWebapp.ViewModels.ArticleViewModel
@using StockportWebapp.FeatureToggling
@inject FeatureToggles featureToggles

@{
    ViewData["Title"] = Model.Article.Title;
    ViewData["Description"] = Model.MetaDescription;
    ViewData["og:title"] = Model.OgTitleMetaData;
    Layout = "../Shared/_Layout.cshtml";
}

@section Breadcrumbs {
    <partial name="Breadcrumb" model="Model.Article.Breadcrumbs" />
}
<div class="grid-container-full-width">
    <div class="grid-container grid-100 article-cols">
        <div tabindex="-1" id="content"></div>
        <article id="uitest-page-has-loaded" class="article-col l-body-section-filled @(Model.HasParentTopicWithSubItems()
                                                                      ? "grid-parent mobile-grid-100 tablet-grid-100 grid-70"
                                                                      : "grid-parent mobile-grid-100 tablet-grid-100 grid-100")">
            <section aria-label="@Model.Article.Title content" class="grid-100 mobile-grid-100 ">
                <div class="l-content-container">
                    @if (!string.IsNullOrEmpty(Model.Article.Image))
                    {
                        <div class="title-card-background-image" style="background-image: url(@Model.Article.Image)">
                            <div class="title-card content">
                                <h1>@Model.Article.Title</h1>
                            </div>
                        </div>
                        <div class="title-spacer"></div>
                    }
                    <div class="grid-100">
                        @if (string.IsNullOrEmpty(Model.Article.Image))
                        {
                            <div class="grid-100">
                                <h1>@Model.Article.Title</h1>
                            </div>
                        }
                        @{
                            if (Model.Article.Alerts != null)
                            {
                                <div class="alert-container">
                                    @foreach (var alert in Model.Article.Alerts)
                                    {
                                        <partial name="DisplayTemplates/Alert" model='alert' />
                                    }
                                </div>
                            }
                        }

                        <partial name="Advertisement" model='Model.Article.Advertisement' />

                        <div class="grid-100">

                            @if (Model.ShouldShowArticleSummary && !string.Equals("<p></p>\n", Model.Article.Body))
                            {
                            <div class="map-content">
                                <p class="news-date news-article-date">
                                    <i class="fa fa-clock-o" aria-hidden="true"></i>Last updated <partial name="FormattedDate" model='Model.Article.UpdatedAt' />
                                </p>
                                @Html.Raw(Model.Article.Body)
                            </div>
                            }

                            @if (Model.DisplayedSection != null)
                            {
                                <partial name="../Shared/Section-Nav" />
                                <partial name="../Shared/Article-Single-Section" model='Model' />
                                <partial name="DisplayTemplates/Section-Pagination" />
                            }
                        </div>
                    </div>
                </div>
            </section>
        </article>
        @{
            if (Model.HasParentTopicWithSubItems())
            {
                <div class="l-right-side-bar grid-30 tablet-grid-100 mobile-grid-100 grid-parent article-col article-col-sidebar">
                    @if (Model.HasParentTopicWithSubItems())
                    {
                        <div class="l-right-side-bar-section">
                            <h2>@Model.Article.ParentTopic.Name</h2>
                            <ul>
                                @{var showMoreButton = false;}
                                @foreach (var item in Model.SidebarSubItems(out showMoreButton))
                                {
                                    <li class="@(item.NavigationLink == Model.Article.NavigationLink ? "active" : "")">
                                        <a href="@item.NavigationLink"><span>@item.Title</span></a>
                                    </li>
                                }

                                @if (showMoreButton)
                                {
                                    <li>
                                        <a href="@Url.Action("Index", "Topic", new {topicSlug = Model.Article.ParentTopic.Slug})">
                                            <strong>More</strong>
                                        </a>
                                    </li>
                                }
                            </ul>
                        </div>
                    }
                </div>
            }
        }
    </div>
</div>

<script type="text/javascript">
    require(['startup', 'carousel', 'matchHeight', 'matchboxconfig', 'slick'],
        function (startup, carousel, matchHeight, matchboxconfig, slick) {
            startup.Init();
            matchboxconfig.Init();
            carousel.Init();
        })
</script>