@model NavCard
@{
    bool displayImage = (bool)ViewData["displayImage"];
    
    string borderCssDesktop = " navcard-all-desktop navcard--theme-grey-accent-all-desktop";
    string borderCssTablet = " navcard-all-tablet navcard--theme-grey-accent-all-tablet";
    string noBorder = " navcard--border-top-0-desktop navcard--border-top-0-tablet";
    string noBorderImage = " navcard--border-bottom-0-desktop navcard--border-bottom-0-tablet";
    string borderRadius = " navcard--radius-bottom-left navcard--radius-bottom-right";
    string borderImageRadius = " navcard--radius-top-left navcard--radius-top-right";

    string borderCssClasses = displayImage 
        ? $"{noBorderImage} {borderImageRadius}"
        : $"{noBorder} {borderRadius}";

    bool showLastUpdatedDate = (bool)ViewData["ShowLastUpdatedDate"];
}

<a href="@Model.Url" class="navcard__link @borderCssDesktop @borderCssTablet @borderCssClasses" data-cy="nav-card-link">
    <div class="navcard__content">
        @if (displayImage){
            @if (!string.IsNullOrEmpty(Model.TeaserImage))
            {
                <partial name="NavCardImage" model="@Model.TeaserImage" />
            }
            else
            {
                <partial name="NavCardImage" model="@Model.Image" />
            }
        }
        
        <div class="navcard-content navcard-content--padding">
            @if (showLastUpdatedDate)
            {
                <p class="lead"><partial name="FormattedDate" model='Model.Date'/></p>
            }

            <h3 class="navcard__title navcard__title--black">@Model.Title</h3>

            <p class="navcard__teaser">@Model.Teaser</p>
        </div>
    </div>
</a>