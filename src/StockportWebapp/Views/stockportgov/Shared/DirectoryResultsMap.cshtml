@model DirectoryViewModel

<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCPMO2lE7np9cG_zG63JH_pNVmRfoajZjg&callback=initMap"></script>
<div id="map" class="google-map" style="display:none;"></div>

<script defer>
    async function initMap() {
        // Request needed libraries.
        const { Map, InfoWindow } = await google.maps.importLibrary("maps");
        const { AdvancedMarkerElement, PinElement } = await google.maps.importLibrary("marker");

        const map = new Map(document.getElementById("map"), {
            zoom: 12,
            center: { lat: 53.40979, lng: -2.15761 },
            mapId: "roadmap",
        });

        const markers = [
            @if (Model.PaginationInfo.CurrentPage.Equals(1))
            {
                @foreach (var entry in Model.PinnedEntries.Where(entry => entry.DirectoryEntry.IsNotOnTheEqautor))
                {
                    @Html.Raw(@"{ " + entry.ToString(@Url.Action("DirectoryEntry", "Directory", new { slug=@entry.FullyResolvedSlug })) + "}, ")
                }
            }

            @foreach (var entry in Model.PaginatedEntries.Where(entry => entry.DirectoryEntry.IsNotOnTheEqautor))
            {
                @Html.Raw(@"{ " + entry.ToString(@Url.Action("DirectoryEntry", "Directory", new { slug=@entry.FullyResolvedSlug })) + "}, ")
            }
        ];

        // Create an info window to share between markers.
        const infoWindow = new InfoWindow();

        // Create the markers.
        markers.forEach(({ position, title, content, isPinned, mapPinIndex }, i) => {
            const highlightPin = new PinElement({
                glyph: `${mapPinIndex}`,
                background: '#b32384',
                glyphColor: "white",
                borderColor: '#991e70',
                scale: 1.2,
            });

            const defaultPin = new PinElement({
                glyph: `${mapPinIndex}`,
                background: 'teal',
                glyphColor: "white",
                borderColor: '#066',
                scale: 1.2
            });

            const marker = new AdvancedMarkerElement({
                position,
                map,
                title: `${mapPinIndex}. ${title}`,
                content: isPinned ? highlightPin.element : defaultPin.element,
            });

            // Add a click listener for each marker, and set up the info window.
            marker.addListener("click", ({ domEvent, latLng }) => {
                const { target } = domEvent;

                infoWindow.close();
                infoWindow.setContent(content);
                infoWindow.open(marker.map, marker);
            });
        });
    }

    initMap()
</script>