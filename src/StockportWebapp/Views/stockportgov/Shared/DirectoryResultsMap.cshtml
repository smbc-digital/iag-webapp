@model DirectoryViewModel
@inject ICookiesHelper CookiesHelper

@if(Model.DisplayMap)
{
    List<string> mapCookie = CookiesHelper.GetCookies<string>("map");
    string displayValue = mapCookie.Contains(Model.Slug)
        ? "block"
        : "none";

    <script src="@("https://unpkg.com/@googlemaps/markerclusterer/dist/index.min.js")"></script>

    <div id="mapContainer" style="display:none;">
        <div id="map" class="google-map"></div>
    </div>

    <script>
        async function initMap() {
            const locations = [
                @if (Model.PaginationInfo.CurrentPage.Equals(1))
                {
                    @foreach (var entry in Model.PinnedEntries.Where(entry => entry.DirectoryEntry.IsNotOnTheEqautor))
                    {
                        @Html.Raw(@"{ " + entry.ToString(@Url.Action("DirectoryEntry", "Directory", new { slug=@entry.FullyResolvedSlug })) + "}, ")
                    }
                }

                @foreach (var entry in Model.PaginatedEntries.Where(entry => entry.DirectoryEntry.IsNotOnTheEqautor))
                {
                    @Html.Raw(@"{ " + entry.ToString(@Url.Action("DirectoryEntry", "Directory", new { slug=@entry.FullyResolvedSlug })) + "}, ")
                }
            ];

            // Request needed libraries.
            const { Map, InfoWindow } = await google.maps.importLibrary('maps');
            const { AdvancedMarkerElement, PinElement } = await google.maps.importLibrary('marker');

            const mapContainer = document.getElementById("mapContainer");
            const map = new Map(document.getElementById("map"), {
                center: { lat: 53.40979, lng: -2.15761 },
                mapId: "roadmap",
            });

            // Create an info window to share between markers.
            const infoWindow = new InfoWindow();

            var bounds = new google.maps.LatLngBounds();
            
            // Create the markers.
            const markers = locations.map(({ position, title, content, isPinned, mapPinIndex }, i) => {
                bounds.extend(position);

                const highlightPin = new PinElement({
                    glyph: `${mapPinIndex}`,
                    background: '#b32384',
                    glyphColor: "white",
                    borderColor: '#991e70',
                    scale: 1.2,
                });

                const defaultPin = new PinElement({
                    glyph: `${mapPinIndex}`,
                    background: 'teal',
                    glyphColor: "white",
                    borderColor: '#066',
                    scale: 1.2
                });

                const marker = new AdvancedMarkerElement({
                    position,
                    map,
                    title: `${mapPinIndex}. ${title}`,
                    content: isPinned ? highlightPin.element : defaultPin.element,
                    gmpClickable: true,
                });

                marker.addListener("click", ({ domEvent, latLng }) => {
                    const { target } = domEvent;

                    infoWindow.close();
                    infoWindow.setContent(content);
                    infoWindow.open(marker.map, marker);
                });

                return marker;
            });

            map.fitBounds(bounds);

            const markerCluster = new markerClusterer.MarkerClusterer({ markers, map });

            mapContainer.setAttribute("style", "display:@displayValue");

            // Change aria-label for screen readers
            map.addListener('tilesloaded', () => {
                let mapDiv = document.querySelector("#map > div > div[aria-label='Map']");
                if (mapDiv) {
                    mapDiv.setAttribute("aria-label", "Showing results for @Model.Title");
                }
            });
        }
    </script>

    <script defer async src="https://maps.googleapis.com/maps/api/js?v=3&key=AIzaSyCPMO2lE7np9cG_zG63JH_pNVmRfoajZjg&callback=initMap&loading=async"></script>
}