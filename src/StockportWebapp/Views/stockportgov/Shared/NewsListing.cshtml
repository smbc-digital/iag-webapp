@model NewsroomViewModel
@{
    Newsroom newsroom = Model.Newsroom;
}

<div class="grid-container news-grid-container-margins">
    <div class="grid-30 tablet-grid-100 mobile-grid-100 l-filters" id="news-filters">
        @if (Model.HasActiveFilter())
        {
            <h2 class="filters-heading">Refine by</h2>
        }

        <ul class="filters-list" id="displayRefineBy">
            @if (Model.HasActiveFilter())
            {
                <li class="filters-active">
                    <ul>
                        @if (!string.IsNullOrEmpty(Model.Category))
                        {
                            <li class="filter collapsible">
                                <a href="@Url.RouteUrl(Model.FilteredUrl.WithoutCategory())" rel="nofollow">
                                    <span class="fa fa-times" aria-hidden="true"></span>
                                    @Model.Category
                                </a>
                            </li>
                        }

                        @if (Model.DateFrom.HasValue && Model.DateTo.HasValue && (Model.DateFrom <= Model.DateTo))
                        {
                            <li class="filter collapsible">
                                <a href="@Url.RouteUrl(Model.FilteredUrl.WithoutDateFilter())" rel="nofollow">
                                    <span class="fa fa-times" aria-hidden="true"></span>
                                    @Model.GetActiveDateFilter()
                                </a>
                            </li>
                        }

                        @if (!string.IsNullOrEmpty(Model.Tag))
                        {
                            <li class="filter collapsible">
                                <a href="@Url.RouteUrl(Model.FilteredUrl.WithoutTagFilter())" rel="nofollow">
                                    <span class="fa fa-times" aria-hidden="true"></span>
                                    @Model.Tag
                                </a>
                            </li>
                        }
                    </ul>
                </li>
            }

            @if (Model.Categories.Any())
            {
                <li class="filter collapsible" id="category-filter">
                    @if (Model.HasActiveFilter())
                    {
                        <h3 tabindex="0"  class="filter-title focusable">Category</h3>
                    }
                    else
                    { 
                        <h2 tabindex="0"  class="filter-title focusable">Category</h2>
                    }

                    <ul class="filters-list">
                        <li class=@(Model.FilteredUrl.HasNoCategoryFilter() ? "active" : string.Empty)>
                            <a href="@Url.RouteUrl(Model.FilteredUrl.WithoutCategory())">All categories</a>
                        </li>

                        @foreach (string category in Model.Categories)
                        {
                            <li class=@(Model.CurrentUrl.MatchesQueryParam("Category", category) ? "active" : string.Empty)>
                                <a href="@Url.RouteUrl(Model.FilteredUrl.AddCategoryFilter(category))" rel="nofollow">@category</a>
                            </li>
                        }
                    </ul>
                </li>
            }

            <li class="filter collapsible" id="news-archive">
                @if (Model.HasActiveFilter())
                {
                    <h3 tabindex="0" class="filter-title focusable">News archive</h3>
                }
                else
                {
                    <h2 tabindex="0" class="filter-title focusable">News archive</h2>
                }

                <ul class="filters-list filters-outer-list" id="uitest-news-archive">
                    <li class=@(Model.FilteredUrl.HasNoDateFilter() ? "active" : string.Empty)>
                        <a href="@Url.RouteUrl(Model.FilteredUrl.WithoutDateFilter())">All recent news</a>
                    </li>

                    @foreach (int year in newsroom.Dates.Select(s => s.Year).Distinct().OrderByDescending(y => y))
                    {
                        <li class="collapsible">
                            <p tabindex="0" class="filter-inner-title focusable">@year.ToString()</p>
                            <ul class="filters-list filters-inner-list" id="@year.ToString()">
                                @foreach (DateTime date in newsroom.Dates.Where(d => d.Year == year).OrderBy(a => a).Reverse())
                                {
                                    <li class=@(Model.DateRange != "customdate" && Model.DateFrom == date ? "active" : string.Empty)>
                                        <a href="@Url.RouteUrl(Model.FilteredUrl.AddMonthFilter(date))" rel="nofollow">@date.ToString("MMMM yyyy")</a>
                                    </li>
                                }
                            </ul>
                        </li>
                    }

                    <li id="custom-filter-li" class="@(Model.DateRange == "customdate" ? "customdateactive" : string.Empty) filter collapsible">
                        <a tabindex="0" class="filter-title custom-date-title" rel="nofollow">Custom date</a>
                        <ul class="filters-list custom-date">
                            <li class="@(Model.DateRange == "customdate" ? "active" : string.Empty)">
                                <form action="@Url.Action("Index", "News")" method="get">
                                    <input type="hidden" name="DateRange" value="customdate" />
                                    @if (!string.IsNullOrEmpty(Model.Category))
                                    {
                                        <input type="hidden" name="Category" value="@Model.Category" />
                                    }
                                    <div class="date-from">
                                        <label asp-for="@Model.DateFrom"></label>
                                        <input type="date" asp-for="@Model.DateFrom" />
                                        <span role="alert" aria-atomic="true" asp-validation-for="@Model.DateFrom" class="form-customdate-validation-error form-field-validation-error"></span>
                                    </div>
                                    <div class="date-to">
                                        <label asp-for="@Model.DateTo"></label>
                                        <input type="date" asp-for="@Model.DateTo" />
                                        <span id="inputvalidation" role="alert" aria-atomic="true" asp-validation-for="@Model.DateTo" class="form-customdate-validation-error form-field-validation-error"></span>
                                    </div>
                                    <div class="update-button">
                                        <stock-button class="button-customdate">Update</stock-button>
                                    </div>
                                </form>
                            </li>
                        </ul>
                    </li>
                </ul>
            </li>
        </ul>

        <p class="mobile-filter-heading filter-title">Filter news</p>

    </div>
    <div id="content" class="grid-70 tablet-grid-100 mobile-grid-100 news-article-grid">
        @if (newsroom.Alerts is not null)
        {
            foreach (var alert in newsroom.Alerts)
            {
                <partial name="DisplayTemplates/Alert" model='alert'/>
            }
        }

        @if (!newsroom.News.Any())
        {
            <div class="grid-100 news-article-not-found">
                <h2>No news articles found</h2>
            </div>
        }
        else
        {
            <ul  class="nav-card-news-list grid-100">
                @foreach (var subItem in newsroom.News)
                {
                    <li id="@subItem.Slug" class="grid-100 grid-parent nav-card-news nav-card-news-item">
                        <a href="@Url.Action("Detail", "News", new {slug = subItem.Slug})">
                            <div class="news-bottom-border grid-100 grid-parent">
                                @if (!string.IsNullOrEmpty(subItem.ThumbnailImage))
                                {
                                    <div class="mobile-grid-35 tablet-grid-30 grid-30 grid-parent nav-card-news-thumbnail nav-card-news-thumbnail-background-image tablet-push-70 push-70" style="background-image: url(@subItem.ThumbnailImage);"></div>
                                }
                                <div  class="@(!string.IsNullOrEmpty(subItem.ThumbnailImage) ? "mobile-grid-65 tablet-grid-70 nav-card-news-detail pull-30 tablet-pull-30" : string.Empty) grid-70 grid-parent">
                                    <div class="news-date hide-on-mobile">
                                        <span class="fa fa-clock-o" aria-hidden="true"></span><partial name="FormattedDate" model='subItem.UpdatedAt'/>
                                    </div>
                                    <h2 class="nav-card-news-title" style="margin: 0">@subItem.Title</h2>
                                    <p class="nav-card-news-teaser hide-on-mobile">@subItem.Teaser</p>
                                    <div class="news-date hide-on-desktop hide-on-tablet">
                                        <span class="fa fa-clock-o" aria-hidden="true"></span><partial name="FormattedDate" model='subItem.UpdatedAt'/>
                                    </div>
                                </div>
                            </div>
                        </a>
                    </li>
                }
            </ul>

            <div class="news-pagination">
                <partial name="Pagination" model='Model.Pagination'/>
            </div>
        }
    </div>
</div>

<script>
    require(['/assets/javascript/config-abc6dd3d.min.js'], function() {
        require(['filters'],
            function(filters) {
                filters.Init();
            }
        );
    });
</script>