@using StockportWebapp.Utils
@model StockportWebapp.Models.Pagination


<div class="pagination-section grid-parent">
    @{
        var indexOfFirstItemOnPage = PaginationHelper.CalculateIndexOfFirstItemOnPage(Model.Page, Model.PageSize);
        var indexOfLastItemOnPage = PaginationHelper.CalculateIndexOfLastItemOnPage(Model.Page, Model.TotalItemsOnPage, Model.PageSize);
    }
    <div class="grid-50 tablet-grid-100 mobile-grid-100 pagination-display ">Showing @indexOfFirstItemOnPage - @indexOfLastItemOnPage of @Model.TotalItems @Model.DisplayName</div>
    <div class="grid-50 tablet-grid-100 mobile-grid-100 pagination-page-numbers">
        @{
            if (Model.Page > 1)
            {
                var queryParams = new Dictionary<string, string>
                        {
                            {"Page", (Model.Page - 1).ToString()}
                        };
                var urlWithQueryParams = Model.CurrentUrl.AddQueriesToUrl(queryParams);
                //var url = Url.RouteUrl(urlWithQueryParams);

                var url = PaginationHelper.BuildUrl(Model.Page - 1, Model.CurrentUrl, Url);

                < a href="@url">Previous</a>

                <a href="@Url.RouteUrl(Model.CurrentUrl.AddQueriesToUrl(new Dictionary<string, string> {{"Page", (Model.Page - 1).ToString()}}))">Previous</a>
            }

            var visiblePageNumbers = PaginationHelper.GenerateVisiblePageNumbers(Model.Page, Model.TotalPages);

            foreach (var visiblePageNumber in visiblePageNumbers)
            {
                if (visiblePageNumber.IsCurrentPage)
                {
                    <span>@visiblePageNumber.PageNumber.ToString()</span>
                }
                else
                {
                    var queryParams = new Dictionary<string, string>
                        {
                            {"Page", visiblePageNumber.PageNumber.ToString()}
                        };
                    var urlWithQueryParams = Model.CurrentUrl.AddQueriesToUrl(queryParams);
                    var url = Url.RouteUrl(urlWithQueryParams);

                    <a href="@url">@visiblePageNumber.PageNumber.ToString()</a>
                }
            }

            if (Model.Page < Model.TotalPages)
            {
                <a href="@Url.RouteUrl(Model.CurrentUrl.AddQueriesToUrl(new Dictionary<string, string> {{"Page", (Model.Page + 1).ToString()}}))">Next</a>
            }
        }
    </div>

</div>

