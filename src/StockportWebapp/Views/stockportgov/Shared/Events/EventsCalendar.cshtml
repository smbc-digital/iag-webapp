@using System.Threading.Tasks
@using StockportWebapp.Utils
@using StockportWebapp.ViewModels;
@model EventCalendar
@inject IDateCalculator DateCalculator
@{
    var dateFilter = Model.DateRange == "customdate" ? Model.GetCustomEventFilterName() : DateCalculator.ReturnDisplayNameForFilter(Model.DateRange);
}
<div class="grid-container events-grid-container-margins">
    <div class="grid-30 tablet-grid-100 mobile-grid-100 l-filters" id="event-filters">
        <p class="filters-heading">Refine by</p>
        <ul class="filters-list">
                <ul class="filters-list" id="displayRefineBy">
                    <li class="filters-active">
                        <ul>
                        @if (!string.IsNullOrEmpty(Model.Category) && Model.DoesCategoryExist(Model.Category))
                        {
                            <li class="filter collapsible"><a href="@Url.RouteUrl(Model.FilteredUrl.WithoutCategory())"><i class="fa fa-times" aria-hidden="true"></i> @Model.Category</a></li>
                        }
                        @if (!string.IsNullOrEmpty(dateFilter) && (Model.DateFrom <= Model.DateTo))
                        {
                            <li class="filter collapsible"><a href="@Url.RouteUrl(Model.FilteredUrl.WithoutDateFilter())"><i class="fa fa-times" aria-hidden="true"></i> @dateFilter</a></li>
                        }
                        @if (!string.IsNullOrEmpty(Model.Tag))
                        {
                            <li class="filter collapsible"><a href="@Url.RouteUrl(Model.FilteredUrl.WithoutTagFilter())"><i class="fa fa-times" aria-hidden="true"></i> @Model.Tag</a></li>
                        }
                        </ul>
                    </li>
                    <li class="filter collapsible" id="date-filter">
                        <p class="filter-title">Date</p>
                        <ul class="filters-list">                           
                            @{
                                <li id="custom-filter-li" class="@(Model.DateRange == "customdate" ? "customdateactive" : "") filter collapsible">
                                    <a class="filter-title custom-date-title">Choose a date range</a>
                                    <ul class="filters-list custom-date">
                                        <li class="@(Model.DateRange == "customdate" ? "active" : "")">
                                            <form action="/events" method="get">
                                                <input type="hidden" name="DateRange" value="customdate" />
                                                @if (!string.IsNullOrEmpty(Model.Category))
                                                {
                                                    <input type="hidden" name="Category" value="@Model.Category" />
                                                }                                                   
                                                @if (!string.IsNullOrEmpty(Model.Tag))
                                                {
                                                    <input type="hidden" name="Tag" value="@Model.Tag" />
                                                }                                                   
                                                <div class="date-from">
                                                    <label asp-for="@Model.DateFrom"></label>
                                                    <input id="datepickerfrom" type="date" onchange="setEndDateToStartDate('datepickerto', 'datepickerfrom')" class="datepicker" asp-for="@Model.DateFrom" novalidate />
                                                    <span asp-validation-for="@Model.DateFrom" class="form-customdate-validation-error form-field-validation-error"></span>
                                                </div>
                                                <div class="date-to">
                                                    <label asp-for="@Model.DateTo"></label>
                                                    <input id="datepickerto" type="date" class="datepicker" asp-for="@Model.DateTo" novalidate />
                                                    <span id="inputvalidation" asp-validation-for="@Model.DateTo" class="form-customdate-validation-error form-field-validation-error"></span>
                                                </div>
                                                <div class="update-button">
                                                    <stock-button class="button-customdate">Update</stock-button>
                                                </div>
                                            </form>
                                        </li>
                                    </ul>
                                </li>    
                            }  
                            @foreach (var eventFilter in DateCalculator.EventFilters)
                            {
                                <li class="@(Model.DateRange == eventFilter.Key ? "active" : "")">
                                    <a href="@Url.RouteUrl(Model.FilteredUrl.AddDateFilter(eventFilter.Value.DateFrom, eventFilter.Value.DateTo, eventFilter.Key ))"> @eventFilter.Value.DateRange </a>
                                </li>
                            }       
                        </ul>
                    </li>
                    @if (Model.Categories.Any()) {
                        <li class="filter collapsible">
                            <p class="filter-title">Category</p>
                            <ul class="filters-list">
                                @foreach (var category in Model.Categories)
                                {
                                    <li class="@(Model.Category == category ? "active" : "")">                                       
                                        <a href="@Url.RouteUrl(Model.FilteredUrl.AddCategoryFilter(category))">@category</a>
                                    </li>
                                }
                            </ul>
                        </li>
                    }              
                </ul>
                <p class="mobile-filter-heading filter-title">Filter Events</p>
        </ul>
    </div>
    <div class="grid-70 tablet-grid-100 mobile-grid-100 events-article-grid">
        @if (!Model.Events.Any())
        {
            <div class="grid-100 events-article-not-found">
                <h2>No events found</h2>
            </div>
        }
        else
        {                   
            <ul class="nav-card-events-list grid-100">
                @{
                    var previousEnteredDate = DateTime.MinValue;
                }
                @foreach (var subItem in Model.Events)
                {
                    <li class="grid-100 grid-parent nav-card-events nav-card-events-item">
                        @if (subItem.EventDate.Date == DateTime.Now.Date && subItem.EventDate.Date != previousEnteredDate)
                        {
                            <div>
                                <h2 class="event-by-date-header">Today</h2>
                            </div>
                        }
                        else if (subItem.EventDate.Date == DateTime.Now.AddDays(1).Date && subItem.EventDate.Date != previousEnteredDate)
                        {
                            <div >
                                <h2 class="event-by-date-header">Tomorrow</h2>
                            </div>
                        }
                        else if (subItem.EventDate.Date != previousEnteredDate)
                        {
                            <div>
                                <h2 class="event-by-date-header">@subItem.EventDate.ToString("dddd dd MMMM yyyy")</h2>
                            </div>
                        }
                        @{
                            previousEnteredDate = subItem.EventDate.Date;
                        }
                        <div class="events-bottom-border grid-100 grid-parent">
                            <a class="uitest-eventlink" href="@Url.Action("Detail", "Events", new {slug = subItem.Slug, date = subItem.EventDate.ToString("yyyy-MM-dd")})">
                                @if (!string.IsNullOrEmpty(subItem.ThumbnailImageUrl))
                                {
                                    <div class="mobile-grid-35 tablet-grid-30 grid-30 grid-parent nav-card-events-thumbnail nav-card-events-thumbnail-background-image tablet-push-70 push-70" style="background-image: url(@subItem.ThumbnailImageUrl);"></div>
                                }
                                <div class="@(!string.IsNullOrEmpty(subItem.ThumbnailImageUrl) ? "mobile-grid-65 tablet-grid-70 nav-card-events-detail pull-30 tablet-pull-30" : "") grid-70 grid-parent">
                                    <h2 class="nav-card-events-title">@subItem.Title</h2>

                                    <div class="events-date hide-on-mobile">
                                        <i class="fa fa-clock-o"></i>@subItem.EventDate.ToString("dddd dd MMMM") @subItem.StartTime
                                    </div>
                                    <p class="hide-on-mobile nav-card-events-location">@Html.Raw(subItem.Location)</p>
                                    <p class="nav-card-events-fee">@subItem.Fee</p>
                                </div>
                            </a>
                        </div>
                    </li>
                }

                @Html.Partial("Pagination", Model.Pagination)
            </ul>
        }
    </div>
</div>